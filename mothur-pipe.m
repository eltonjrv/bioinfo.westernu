### After running make.contigs individually for each sample (see cmd-line.txt and mkctg-individual-outputs dir), run he following pipeline as a mothur script:

### Removing undesireable sequences
summary.seqs(fasta=fleas.trim.contigs.fasta)
get.current()
screen.seqs(fasta=fleas.trim.contigs.fasta, group=fleas.contigs.groups, maxambig=0, maxlength=552, processors=6)
get.current()
summary.seqs()
unique.seqs(fasta=current)
get.current()
count.seqs(name=current, group=current)
summary.seqs(count=current)
align.seqs(fasta=current, reference=silva.bacteria.fasta)
summary.seqs(fasta=current, count=current)
get.current()
screen.seqs(fasta=current, count=current, summary=current, start=13875, end=27654, maxhomop=8)
summary.seqs(fasta=current, count=current)
filter.seqs(fasta=current, vertical=T, trump=.)
summary.seqs(fasta=current, count=current)
unique.seqs(fasta=current, count=current)
summary.seqs(fasta=current, count=current)
pre.cluster(fasta=current, count=current, diffs=5)
summary.seqs(fasta=current, count=current)
chimera.vsearch(fasta=current, count=current, dereplicate=t)
remove.seqs(fasta=current, accnos=current)
summary.seqs(fasta=current, count=current)

### Classifying sequences with RDP
classify.seqs(fasta=current, count=current, reference=trainset9_032012.pds.fasta, taxonomy=trainset9_032012.pds.tax, cutoff=80)
remove.lineage(fasta=current, count=current, taxonomy=current, taxon=Chloroplast-Mitochondria-unknown-Archaea-Eukaryota)
summary.tax(taxonomy=current, count=current)
get.current()

### Assigning error rates (if one has a Mock community sample)
#get.groups(count=current, fasta=current, groups=Mock)
#seq.error(fasta=current, count=current, reference=HMP_MOCK.v35.fasta, aligned=F)
#remove.groups(count=current, fasta=current, taxonomy=current, groups=Mock)

### Preparing for analysis (catching OTUs)
#get.current()
dist.seqs(fasta=current, cutoff=0.20)
get.current()
cluster(column=current, count=current)
cluster.split(fasta=current, count=current, taxonomy=current, splitmethod=classify, taxlevel=4, cutoff=0.03)
get.current()
make.shared(list=current, count=current)   # OTU table generation (the *.shared outfile is an otu table)
classify.otu(list=current, count=current, taxonomy=current)        # OTUs classification (two outputs: *cons.tax.summary and *cons.taxonomy)
